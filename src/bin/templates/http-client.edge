// This file was generated by Cavia, please don't edit it!
import { Injectable, HttpClient, HttpResponse } from '@caviajs/core';

@Injectable()
export class {{ name }}HttpClient {
  public baseUrl: string = 'http://localhost:3456';

  constructor(protected readonly httpClient: HttpClient) {
  }

  @each(endpoint in endpoints)
  public async {{ camelCase(endpoint.name) }}(
  @if(endpoint.schema.request.body)
    body: {{ pascalCase(endpoint.name) }}Body,
  @end
  @if(endpoint.schema.request.headers)
    headers: {{ pascalCase(endpoint.name) }}Headers,
  @end
  @if(endpoint.schema.request.params)
    params: {{ pascalCase(endpoint.name) }}Params,
  @end
  @if(endpoint.schema.request.query)
    query: {{ pascalCase(endpoint.name) }}Query,
  @end
  ): Promise<{{ pascalCase(endpoint.name) }}Response> {
    const url: URL = new URL('{{ endpoint.path }}', this.baseUrl);

    @if(endpoint.schema.request.query)
    Object.entries(query || {}).forEach(([key, value]) => {
      url.searchParams.set(key, value);
    });
    @end

    return this
      .httpClient
      .request({
        @if(endpoint.schema.request.body)
        body: body,
        @end
        @if(endpoint.schema.request.headers)
        headers: headers,
        @end
        method: '{{ endpoint.method }}',
        // responseType: 'buffer',
        // timeout: undefined,
        url: url.toString(),
      });
  }
  @end
}
@each(endpoint in endpoints)
@if(endpoint.schema.request.body)
export interface {{ pascalCase(endpoint.name) }}Body {
}
@end
@if(endpoint.schema.request.headers)
export interface {{ pascalCase(endpoint.name) }}Headers {
}
@end
@if(endpoint.schema.request.params)
export interface {{ pascalCase(endpoint.name) }}Params {
}
@end
@if(endpoint.schema.request.query)
export interface {{ pascalCase(endpoint.name) }}Query {
}
@end
export type {{ pascalCase(endpoint.name) }}Response = HttpResponse<any>;
@end
